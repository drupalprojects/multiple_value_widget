<?php

/**
 * @file
 * Multiple Value Widget module.
 */

/**
 * Implements hook_theme().
 */
function multiple_value_widget_theme() {

  $path = drupal_get_path('module', 'multiple_value_widget');

  return array(

    'multiple_value_widget_form' => array(
      'render element' => 'element',
      'file' => 'multiple_value_widget.theme.inc',
    ),

    'multiple_value_widget_file_widget_multiple' => array(
      'render element' => 'element',
      'file' => 'multiple_value_widget.theme.inc',
    ),

    'multiple_value_widget_widget_accordion' => array(
      'render element' => 'element',
      'path' => $path . '/widgets/accordion',
      'file' => 'accordion.inc'
    ),

    'multiple_value_widget_widget_blocks' => array(
      'render element' => 'element',
      'path' => $path . '/widgets/blocks',
      'file' => 'blocks.inc'
    ),

    'multiple_value_widget_widget_tabs' => array(
      'render element' => 'element',
      'path' => $path . '/widgets/tabs',
      'file' => 'tabs.inc'
    ),

  );
}

/**
 * Implements hook_library().
 */
function multiple_value_widget_library() {

  $version = '7.1';
  $path = drupal_get_path('module', 'multiple_value_widget');

  return array(

    'core' => array(
      'version' => $version,
      'js' => array(
        $path . '/multiple_value_widget.js' => array(),
      ),
      'dependencies' => array(
        array('system', 'ui.sortable'),
      ),
    ),

    'widget_accordion' => array(
      'version' => $version,
      'css' => array(
        $path . '/widgets/accordion/accordion.css' => array('basename' => 'multiple_value_widget-accordion.css'),
      ),
      'js' => array(
        $path . '/widgets/accordion/accordion.js' => array(),
      ),
      'dependencies' => array(
        array('system', 'ui.accordion'),
      ),
    ),

    'widget_blocks' => array(
      'version' => $version,
      'css' => array(
        $path . '/widgets/blocks/blocks.css' => array('basename' => 'multiple_value_widget-blocks.css'),
      ),
      'js' => array(
        $path . '/widgets/blocks/blocks.js' => array(),
      ),
    ),

    'widget_tabs' => array(
      'version' => $version,
      'js' => array(
        $path . '/widgets/tabs/tabs.js' => array(),
      ),
      'dependencies' => array(
        array('system', 'ui.tabs'),
      ),
    ),

  );
}


/**
 * Implements hook_multiple_value_widget_widgets().
 */
function multiple_value_widget_multiple_value_widget_widgets() {
  return array(
    'accordion' => array(
      'title' => 'Accordion',
      'custom' => array(
        'file_generic',
        'image_image',
      ),
      'theme' => 'multiple_value_widget_widget_accordion',
    ),

    'blocks' => array(
      'title' => 'Blocks',
      'custom' => array(
        'file_generic',
        'image_image',
      ),
      'theme' => 'multiple_value_widget_widget_blocks',
    ),

    'tabs' => array(
      'title' => 'Tabs',
      'custom' => array(
        'file_generic',
        'image_image',
      ),
      'theme' => 'multiple_value_widget_widget_tabs',
    ),

  );
}



function multiple_value_widget_get_widgets($widget_type = null) {
  $widgets = array();
  foreach(module_implements('multiple_value_widget_widgets') as $module) {
    $module_widgets = module_invoke($module, 'multiple_value_widget_widgets');
    if(is_null($widget_type)) {
      $widgets += $module_widgets;
      continue;
    }
    foreach($module_widgets as $name => $widget) {
      if(isset($widget['custom']) && in_array($widget_type, $widget['custom'])) {
        $widgets[$name] = $widget;
      }
    }
  }
  return $widgets;
}

function multiple_value_widget_get_widget($name) {
  $widgets = multiple_value_widget_get_widgets();
  return isset($widgets[$name]) ? $widgets[$name] : null;
}


/**
 * Implements hook_field_attach_form().
 */
function multiple_value_widget_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {

  $theme_map = array(
    'field_multiple_value_form' => 'multiple_value_widget_form',
    'file_widget_multiple' => 'multiple_value_widget_file_widget_multiple',
  );

  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  foreach(field_info_instances($entity_type, $bundle) as $field_name => $instance) {
    $mvw_widget_type = drupal_array_get_nested_value($instance, array('widget', 'settings', 'multiple_value_widget'));
    if(is_null($mvw_widget_type) || $mvw_widget_type === 'table' || !isset($form[$field_name][$langcode])) {
      continue;
    }

    $element = &$form[$field_name][$langcode];
    $theme = isset($element['#theme']) ? $element['#theme'] : null;
    if(!isset($theme_map[$theme])) {
      continue;
    }
    $element['#theme'] = $theme_map[$theme];
    $element['#mvw']['widget_type'] = $mvw_widget_type;
    $element['#mvw']['field_name'] = $field_name;

    foreach(element_children($element) as $delta) {
      if(isset($element[$delta]['_weight'])) {
        $element[$delta]['_weight']['#type'] = 'hidden';
        $element[$delta]['_weight']['#element_validate'] = array('element_validate_integer');
        $element[$delta]['_weight']['#attributes']['class'][] = 'mvw-weight-delta-order';
      }
    }
  }
}

/**
 * Impements hook_form_FORM_ID_alter().
 */
function multiple_value_widget_form_field_ui_field_edit_form_alter(&$form, &$form_state) {

  $instance_widget = $form['#instance']['widget'];

  $custom_widget_type = field_behaviors_widget('multiple values', $form['#instance']) === FIELD_BEHAVIOR_DEFAULT
    ? NULL
    : $instance_widget['type'];

  $widgets = multiple_value_widget_get_widgets($custom_widget_type);

  if ($widgets) {
    $value = isset($instance_widget['settings']['multiple_value_widget'])
      ? $instance_widget['settings']['multiple_value_widget']
      : 'table';

    $options = array();
    foreach($widgets as $name => $widget) {
      $options += array($name => $widget['title']);
    }
    asort($options);
    $options = array('table' => t('Default')) + $options;

    $form['instance']['widget']['settings']['multiple_value_widget'] = array(
      '#type'     => 'radios',
      '#title'    => t('Multiple value widget'),
      '#options'  => $options,
      '#required' => TRUE,
      '#states'   => array('invisible' => array(':input[name="field[cardinality]"]' => array('value' => 1))),
      '#weight'   => -1,
      '#default_value' => $value,
    );

  }

}
